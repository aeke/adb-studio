name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Update Cargo.lock
        run: cargo update

      - name: Build project (Release)
        run: cargo build --release

      - name: Prepare dist directory
        run: mkdir -p dist

      # ðŸ§© macOS: .app + .dmg + ikon
      - name: Package macOS .app bundle
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          APP_NAME="ADB Studio"
          ICON_SRC="assets/appicon.png"
          APP_BUNDLE="dist/$APP_NAME.app"

          echo "ðŸ“¦ Creating macOS app bundle..."
          mkdir -p "$APP_BUNDLE/Contents/MacOS"
          mkdir -p "$APP_BUNDLE/Contents/Resources"

          cp target/release/adb_studio-ui "$APP_BUNDLE/Contents/MacOS/$APP_NAME"
          cp "$ICON_SRC" "$APP_BUNDLE/Contents/Resources/AppIcon.png"

          cat > "$APP_BUNDLE/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleName</key>
            <string>$APP_NAME</string>
            <key>CFBundleDisplayName</key>
            <string>$APP_NAME</string>
            <key>CFBundleExecutable</key>
            <string>$APP_NAME</string>
            <key>CFBundleIconFile</key>
            <string>AppIcon.png</string>
            <key>CFBundleIdentifier</key>
            <string>com.example.adbstudio</string>
            <key>CFBundleVersion</key>
            <string>${{ env.VERSION }}</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
          </dict>
          </plist>
          EOF

          echo "ðŸ’¿ Creating DMG..."
          hdiutil create "dist/adb_studio_${{ env.VERSION }}_mac.dmg" \
            -volname "$APP_NAME" \
            -srcfolder "$APP_BUNDLE" \
            -ov -format UDZO

      # ðŸ§© Windows: doÄŸrudan .exe, adÄ± "ADB Studio.exe"
      - name: Package Windows executable
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item target\release\adb_studio-ui.exe "dist\ADB Studio.exe"
          Write-Host "âœ… Windows executable named 'ADB Studio.exe' created successfully"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: adb_studio_${{ env.VERSION }}_${{ runner.os }}
          path: dist/

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
