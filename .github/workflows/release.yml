name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Update Cargo.lock
        run: cargo update

      - name: Build project (Release)
        run: cargo build --release

      - name: Prepare dist directory
        run: mkdir -p dist

      # ----------------- macOS -----------------
      - name: Package macOS .app bundle with Finder layout
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          APP_NAME="ADB Studio"
          ICON_SRC="assets/appicon.png"
          APP_BUNDLE="dist/$APP_NAME.app"
          DMG_PATH="dist/$APP_NAME.dmg"

          mkdir -p "$APP_BUNDLE/Contents/MacOS"
          mkdir -p "$APP_BUNDLE/Contents/Resources"

          cp target/release/adb_studio-ui "$APP_BUNDLE/Contents/MacOS/$APP_NAME"
          cp "$ICON_SRC" "$APP_BUNDLE/Contents/Resources/AppIcon.png"

          cat > "$APP_BUNDLE/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleName</key>
            <string>$APP_NAME</string>
            <key>CFBundleDisplayName</key>
            <string>$APP_NAME</string>
            <key>CFBundleExecutable</key>
            <string>$APP_NAME</string>
            <key>CFBundleIconFile</key>
            <string>AppIcon.png</string>
            <key>CFBundleIdentifier</key>
            <string>com.example.adbstudio</string>
            <key>CFBundleVersion</key>
            <string>${{ env.VERSION }}</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
          </dict>
          </plist>
          EOF

          codesign --force --deep --sign - "$APP_BUNDLE/Contents/MacOS/$APP_NAME"

          DMG_TEMP="dist/dmg_temp"
          mkdir -p "$DMG_TEMP"
          cp -R "$APP_BUNDLE" "$DMG_TEMP/"
          ln -s /Applications "$DMG_TEMP/Applications"

          echo '
            tell application "Finder"
              tell disk "'$APP_NAME'"
                open
                set current view of container window to icon view
                set toolbar visible of container window to false
                set statusbar visible of container window to false
                set the bounds of container window to {100, 100, 680, 400}
                set theViewOptions to the icon view options of container window
                set arrangement of theViewOptions to not arranged
                set icon size of theViewOptions to 100
                set position of item "'$APP_NAME'.app" of container window to {140, 150}
                set position of item "Applications" of container window to {400, 150}
                update without registering applications
                delay 1
                close
              end tell
            end tell
          ' > dist/dmg_setup.applescript

          hdiutil create -volname "$APP_NAME" -srcfolder "$DMG_TEMP" -ov -format UDZO "$DMG_PATH"
          hdiutil attach "$DMG_PATH" -mountpoint /Volumes/"$APP_NAME"
          osascript dist/dmg_setup.applescript || true
          hdiutil detach /Volumes/"$APP_NAME"

          rm -rf "$DMG_TEMP" "$APP_BUNDLE" dist/dmg_setup.applescript
          echo "✅ macOS DMG created with drag-and-drop installer at $DMG_PATH"

      # ----------------- Windows -----------------
      - name: Package Windows executable
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item target\release\adb_studio-ui.exe "dist\ADB Studio.exe"
          Write-Host "✅ Windows executable named 'ADB Studio.exe' created successfully"

      - name: Upload OS-specific artifacts
        uses: actions/upload-artifact@v4
        with:
          name: adb_studio_artifacts_${{ matrix.os }}
          path: dist/*

  # ----------------- Release Job -----------------
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: adb_studio_artifacts_macos-latest
          path: dist/macos
        continue-on-error: true

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: adb_studio_artifacts_windows-latest
          path: dist/windows
        continue-on-error: true

      - name: List all release files
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/windows/*.exe
            dist/macos/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
