name: Build & Release (Rust Cross-Platform)

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "Windows"
            os: windows-latest
          - platform: "Linux"
            os: ubuntu-latest
          - platform: "macOS"
            os: macos-latest

    steps:
      # --- Checkout ---
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Setup Rust ---
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # --- Cache cargo deps ---
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # --- Linux dependencies ---
      - name: Install Linux build dependencies
        if: matrix.platform == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libgtk-3-dev \
            libglib2.0-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libcairo2-dev \
            libsoup-3.0-dev \
            libwebkit2gtk-4.1-dev \
            appstream \
            fuse \
            zsync

      # --- Build release binary ---
      - name: Build release binary
        run: cargo build --release

      # --- List output (debugging) ---
      - name: List build output
        run: ls -R target/release

      # ==========================
      # WINDOWS
      # ==========================
      - name: Prepare Windows artifact
        if: matrix.platform == 'Windows'
        shell: pwsh
        run: |
          $bin = Get-ChildItem -Path target/release -Filter *.exe | Select-Object -First 1
          if (-not $bin) { throw "No .exe file found in target/release" }
          mkdir dist
          Copy-Item $bin.FullName dist\
          Compress-Archive -Path dist\* -DestinationPath adb_studio_windows.zip
          Move-Item adb_studio_windows.zip dist\
          Write-Host "✅ Created dist/adb_studio_windows.zip"

      # ==========================
      # LINUX
      # ==========================
      - name: Prepare Linux artifact
        if: matrix.platform == 'Linux'
        run: |
          mkdir -p dist
          BIN_PATH=$(find target/release -maxdepth 1 -type f -executable ! -name "*.d" | head -n 1)
          if [ -z "$BIN_PATH" ]; then
            echo "❌ Binary not found"; exit 1
          fi
          cp "$BIN_PATH" dist/adb_studio
          chmod +x dist/adb_studio
          tar -czf dist/adb_studio_linux.tar.gz -C dist adb_studio
          echo "✅ Created dist/adb_studio_linux.tar.gz"

      - name: Create Linux AppImage
        if: matrix.platform == 'Linux'
        run: |
          APPDIR=AppDir
          mkdir -p $APPDIR/usr/bin
          cp dist/adb_studio $APPDIR/usr/bin/
          mkdir -p $APPDIR/usr/share/applications
          cat > $APPDIR/usr/share/applications/adb_studio.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=ADB Studio
          Exec=adb_studio
          Icon=adb_studio
          Categories=Development;
          EOF

          mkdir -p $APPDIR/usr/share/icons/hicolor/256x256/apps
          cp assets/appicon.png $APPDIR/usr/share/icons/hicolor/256x256/apps/adb_studio.png || true

          wget -q "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" -O appimagetool
          chmod +x appimagetool
          ./appimagetool $APPDIR dist/ADB-Studio-x86_64.AppImage
          echo "✅ Created dist/ADB-Studio-x86_64.AppImage"

      # ==========================
      # MACOS
      # ==========================
      - name: Prepare macOS .app bundle
        if: matrix.platform == 'macOS'
        run: |
          APP_NAME="ADB Studio"
          mkdir -p "$APP_NAME.app/Contents/MacOS"
          mkdir -p "$APP_NAME.app/Contents/Resources"

          BIN_PATH=$(find target/release -maxdepth 1 -type f -perm +111 ! -name "*.dSYM" | head -n 1)
          if [ -z "$BIN_PATH" ]; then
            echo "❌ No binary found in target/release"; exit 1
          fi
          cp "$BIN_PATH" "$APP_NAME.app/Contents/MacOS/"

          cat > "$APP_NAME.app/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleName</key>
            <string>$APP_NAME</string>
            <key>CFBundleExecutable</key>
            <string>$(basename "$BIN_PATH")</string>
            <key>CFBundleIdentifier</key>
            <string>com.yourname.adbstudio</string>
            <key>CFBundleVersion</key>
            <string>${{ github.ref_name }}</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleIconFile</key>
            <string>appicon.icns</string>
          </dict>
          </plist>
          EOF

      - name: Convert icon from assets/appicon.png to .icns
        if: matrix.platform == 'macOS'
        run: |
          brew install create-dmg
          ICON_PATH="assets/appicon.png"
          if [ -f "$ICON_PATH" ]; then
            mkdir -p AppIcon.iconset
            sips -z 512 512 "$ICON_PATH" --out AppIcon.iconset/icon_512x512.png
            cp "$ICON_PATH" AppIcon.iconset/icon_512x512@2x.png
            iconutil -c icns AppIcon.iconset -o appicon.icns
            cp appicon.icns "ADB Studio.app/Contents/Resources/"
          fi

      - name: Create DMG
        if: matrix.platform == 'macOS'
        run: |
          create-dmg \
            --volname "ADB Studio Installer" \
            --window-size 600 400 \
            --icon "ADB Studio.app" 150 150 \
            --app-drop-link 450 150 \
            "ADB Studio.dmg" \
            "ADB Studio.app"
          mkdir -p dist
          mv "ADB Studio.dmg" dist/
          zip -r dist/adb_studio_macos.zip "ADB Studio.app"

      # --- Upload artifacts ---
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-artifacts
          path: dist/*

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "ADB Studio ${{ github.ref_name }}"
          files: |
            artifacts/**/*.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
